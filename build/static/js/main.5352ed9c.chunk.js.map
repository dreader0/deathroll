{"version":3,"sources":["fonts/BalooDa2-SemiBold.ttf","components/Titlebar/Titlebar.js","components/NumWindow/NumWindow.js","components/BigRedButton/BigRedButton.js","components/GameCard/GameCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TitleBar","Container","Row","Col","className","style","color","textShadow","NumWindow","num","gameOver","xs","icon","value","formatValue","toFixed","BigRedButton","onRoll","rolling","Button","onClick","GameCard","text","pastRolls","lg","Card","Spinner","animation","variant","Body","map","pastRoll","key","initialState","ruleNum","ruleText","dupe","rulesList","rules","rule","randomRulesList","randomRules","App","setNewText","newNum","newText","Math","ceil","random","length","i","console","log","setState","stateTimeout","state","newState","unshift","self","setTimeout","setRolledRule","this","Titlebar","Component","Boolean","window","location","hostname","match","library","add","faSkull","faWrench","faInfoCircle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5352ed9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BalooDa2-SemiBold.173dc85d.ttf\";","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nconst TitleBar = () => {\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <h1 className=\"mt-5 mb-3\" style={{color : '#F3F3F3', textShadow: '#000000AA -1px 2px'}}>deathroll</h1>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TitleBar;","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport './NumWindow.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport AnimatedNumber from 'animated-number-react';\r\n\r\n\r\nconst NumWindow = ({ num, gameOver}) => {\r\n  return (\r\n    <Row className=\"justify-content-center\">\r\n      <Col xs={6}>\r\n        {gameOver ?\r\n          <h5>Game Over!</h5> :\r\n          <p></p>\r\n        }\r\n        <div  className=\"rounded px-2 pt-2 pb-1 numWindow\">\r\n          {gameOver ?\r\n            <h1 className=\"skull windowText\"><FontAwesomeIcon icon=\"skull\" /></h1> :\r\n            <h1 className=\"windowText\"> <AnimatedNumber value={num} formatValue={(value) => value.toFixed(0)}/></h1>\r\n          }\r\n        </div>\r\n        {gameOver ?\r\n          <h6 className=\"mt-1\">Click to Reset</h6> :\r\n          <p></p>\r\n        }\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default NumWindow;","import React from 'react';\r\nimport NumWindow from '../NumWindow/NumWindow'\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport './BigRedButton.css'\r\n\r\nconst BigRedButton = ({onRoll, num, gameOver, rolling}) => {\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-center\">\r\n        <Col className=\"mt-5 mb-3\">\r\n            <Button className=\"btn btn-default btn-circle bigButton shine\" onClick={() => onRoll(num)}>\r\n            <NumWindow num={num} gameOver={gameOver}/>\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default BigRedButton;","import React from 'react';\r\nimport { Container, Row, Col, Card, Spinner } from 'react-bootstrap';\r\nimport './GameCard.css'\r\n\r\nconst GameCard = ({text, rolling, pastRolls}) => {\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-center\">\r\n        <Col xs={10} lg={6} className=\"mt-5\">\r\n          <Card className=\"text-center gameCard\">\r\n            <Row className=\"m-1 tabHeader\">\r\n              <Col className=\"p-1\">\r\n                  <h5 className=\"py-2 rounded prTab rollingIcon\">{rolling ? <Spinner animation=\"border\" variant=\"secondary\"/>: text}</h5>\r\n                </Col>\r\n              </Row> \r\n            <Card.Body className=\"mb-2 mx-2 pt-2 pastRolls\">\r\n              <>{pastRolls.map(pastRoll => (<div className=\"pastRoll\" key={pastRoll}>{pastRoll}</div>))}</>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default GameCard; ","import React, {Component} from 'react';\r\nimport Titlebar from './components/Titlebar/Titlebar';\r\nimport BigRedButton from './components/BigRedButton/BigRedButton';\r\nimport GameCard from './components/GameCard/GameCard';\r\nimport rules from './ruleLists/rules.json'\r\nimport randomRules from './ruleLists/randomRules.json'\r\n// import InfoModal from './components/InfoModal/InfoModal'\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport './App.css';\r\n\r\n// initial values at the start of the game\r\nconst initialState = {\r\n  ruleNum: 9999,                   // number displayed on button\r\n  ruleText: \"PRESS THE BUTTON\",   // text displayed in Rolled box\r\n  rolling: false,                 // currently rolling (used mostly for delaying text)\r\n  gameOver: false,                // display something different if the game ends\r\n  dupe: 2                         // keep track of consecutive rolls of the same number\r\n}\r\n\r\nlet pastRolls = []\r\n\r\n// A list of custom rules set for specific numbers\r\nconst rulesList = rules.map((rule) => {\r\n  return rule;\r\n})\r\n\r\nconst randomRulesList = randomRules.rules.map((rule) => {\r\n  return rule;\r\n})\r\n \r\nclass App extends Component{\r\n  constructor() {\r\n    super()\r\n    this.state = initialState;\r\n  }\r\n\r\n  //set the text to display based on the rolled number\r\n  setNewText = (newNum) => {\r\n    var newText = randomRulesList[Math.ceil(Math.random() * (randomRulesList.length - 1))].text\r\n    if (newNum === 1) { // game over\r\n      newText = \"YOU LOSE, TAKE A SHOT\";\r\n    } else {\r\n      for (var i = 0; i < rulesList.length; i++) {  // loop through custom rules looking for matches\r\n        if (rulesList[i].num === newNum) {\r\n          newText = rulesList[i].text;\r\n        }\r\n      }\r\n    }\r\n    return newText;\r\n  }\r\n\r\n  // main game logic, triggered by buttonPress \r\n  onRoll = (num) => {\r\n    console.log(rulesList)\r\n    if (num === 1) { // game over, reset state\r\n      this.setState(initialState);\r\n      pastRolls = []\r\n    } else {\r\n      var newNum = Math.ceil(Math.random() * num); // roll a random number\r\n      var newText = this.setNewText(newNum);\r\n      var stateTimeout = 1000 // used to delay text loading (sometimes we don't want a delay)\r\n    \r\n      // check for duplicate roll and set state accordingly\r\n      if (newNum === num) {\r\n        newText += (\" X\" + this.state.dupe)\r\n        this.setState({ dupe: (this.state.dupe) + 1 })\r\n        stateTimeout = 0;\r\n      } else {\r\n        this.setState({ dupe: 2 });\r\n      }\r\n      \r\n      // always set ruleNum to the rolled Number and rolling to true\r\n      this.setState({\r\n        ruleNum: newNum,\r\n        rolling: true\r\n      })\r\n\r\n      // state update that will be delayed stateTimeout seconds\r\n      var newState = {\r\n        ruleText: newText,\r\n        rolling: false,\r\n      }\r\n      if (newNum === 1) { // 1 means you lose!\r\n        newState.gameOver = true;\r\n        if (num === 2) { // don't delay between 2 and 1\r\n          stateTimeout = 0;\r\n        }\r\n      }\r\n\r\n      let pastRoll\r\n      if (!(this.state.ruleNum === initialState.ruleNum && this.state.dupe === initialState.dupe)) {\r\n        pastRoll = (this.state.ruleNum + ': ' + this.state.ruleText)\r\n        pastRolls.unshift(pastRoll)\r\n      }\r\n    \r\n      var self = this;\r\n      setTimeout(function () { self.setRolledRule(newState, pastRoll); }, stateTimeout);\r\n    }\r\n  }\r\n\r\n  setRolledRule = (newState, pastRoll) => {\r\n    \r\n    this.setState(newState);\r\n  }\r\n\r\n  render() {\r\n    const { ruleNum, ruleText, rolling, gameOver } = this.state;\r\n    return (\r\n      <Container className=\"App\">\r\n        <Row>\r\n          <Col><Titlebar /></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><BigRedButton num={ruleNum} onRoll={this.onRoll}  gameOver={gameOver} rolling={rolling}/></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><GameCard text={ruleText} rolling={rolling} pastRolls={pastRolls}/></Col>\r\n        </Row>\r\n        {/* <Row>\r\n          <Col className=\"mt-5\"><FontAwesomeIcon style={{ fontSize: \"2rem\" }} icon=\"info-circle\" /></Col>\r\n          <InfoModal/>\r\n        </Row> */}\r\n      </Container>\r\n    );\r\n  } \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\n// import { fab } from '@fortawesome/free-brands-svg-icons'\r\nimport { faSkull, faWrench, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport './fonts/BalooDa2-SemiBold.ttf'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nlibrary.add(faSkull, faWrench, faInfoCircle)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}