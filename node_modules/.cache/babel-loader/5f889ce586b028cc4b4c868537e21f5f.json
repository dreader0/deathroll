{"ast":null,"code":"var _jsxFileName = \"D:\\\\git\\\\deathroll\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Titlebar from './components/Titlebar/Titlebar';\nimport BigRedButton from './components/BigRedButton/BigRedButton';\nimport Rolled from './components/Rolled/Rolled';\nimport GameCard from './components/GameCard/GameCard';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './App.css';\nlet playerList = []; // initial values at the start of the game\n\nconst initialState = {\n  ruleNum: 123,\n  // number displayed on button\n  ruleText: \"PRESS THE BUTTON\",\n  // text displayed in Rolled box\n  rolling: false,\n  // currently rolling (used mostly for delaying text)\n  gameOver: false,\n  // display something different if the game ends\n  dupe: 2,\n  // keep track of consecutive rolls of the same number\n  tab: \"rolls\",\n  // which tab is selected in the lower card\n  inputName: '',\n  turn: -1\n};\nlet pastRolls = []; // A list of custom rules set for specific numbers\n\nconst rulesList = [{\n  num: 69,\n  text: \"lock arms and drink\"\n}, {\n  num: 420,\n  text: \"blaze it\"\n}, {\n  num: 17,\n  text: \"naked mile\"\n}, {\n  num: 3,\n  text: \"whatever\"\n}];\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.setNewText = newNum => {\n      var newText = \"drink\";\n\n      if (newNum === 1) {\n        // game over\n        newText = \"YOU LOSE, TAKE A SHOT\";\n      } else {\n        for (var i = 0; i < rulesList.length; i++) {\n          // loop through custom rules looking for matches\n          if (rulesList[i].num === newNum) {\n            newText = rulesList[i].text;\n          }\n        }\n      }\n\n      return newText;\n    };\n\n    this.onRoll = num => {\n      if (num === 1) {\n        // game over, reset state\n        this.setState(initialState);\n        pastRolls = [];\n      } else {\n        var newNum = Math.ceil(Math.random() * num); // roll a random number\n\n        var newText = this.setNewText(newNum);\n        var stateTimeout = 1000; // used to delay text loading (sometimes we don't want a delay)\n        // check for duplicate roll and set state accordingly\n\n        if (newNum === num) {\n          newText += \" X\" + this.state.dupe;\n          this.setState({\n            dupe: this.state.dupe + 1\n          });\n          stateTimeout = 0;\n        } else {\n          this.setState({\n            dupe: 2\n          });\n        } // always set rolling to true, if newNum is 1, update it later\n\n\n        var updateNum = {\n          rolling: true\n        };\n\n        if (newNum !== 1) {\n          updateNum.ruleNum = newNum;\n        }\n\n        this.setState(updateNum);\n        var turn = this.state.turn;\n\n        if (turn === playerList.length - 1) {\n          turn = 0;\n        } else {\n          turn++;\n        } // state update that will be delayed stateTimeout seconds\n\n\n        var newState = {\n          ruleText: newText,\n          rolling: false,\n          turn: turn\n        };\n\n        if (newNum === 1) {\n          // 1 means you lose!\n          newState.gameOver = true;\n          newState.ruleNum = 1;\n\n          if (num === 2) {\n            // don't delay between 2 and 1\n            stateTimeout = 0;\n          }\n        }\n\n        let pastRoll = newNum + ': ' + newText;\n        var self = this;\n        setTimeout(function () {\n          self.setRolledRule(newState, pastRoll);\n        }, stateTimeout);\n      }\n    };\n\n    this.setRolledRule = (newState, pastRoll) => {\n      pastRolls.unshift(pastRoll);\n      this.setState(newState);\n    };\n\n    this.onTabChange = newTab => {\n      if (this.state.tab !== newTab) {\n        this.setState({\n          tab: newTab\n        });\n      }\n    };\n\n    this.onNameChange = event => {\n      this.setState({\n        inputName: event.target.value\n      });\n    };\n\n    this.addName = () => {\n      if (this.state.inputName !== '') {\n        playerList.push(this.state.inputName);\n        this.setState({\n          inputName: ''\n        });\n      }\n    };\n\n    this.state = initialState;\n  } //set the text to display based on the rolled number\n\n\n  render() {\n    const {\n      ruleNum,\n      ruleText,\n      rolling,\n      gameOver,\n      tab,\n      inputName,\n      turn\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Titlebar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 16\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(BigRedButton, {\n      num: ruleNum,\n      onRoll: this.onRoll,\n      gameOver: gameOver,\n      playerList: playerList,\n      turn: turn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 16\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Rolled, {\n      text: ruleText,\n      rolling: rolling,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 16\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(GameCard, {\n      tab: tab,\n      onTabChange: this.onTabChange,\n      pastRolls: pastRolls,\n      playerList: playerList,\n      inputName: inputName,\n      addName: this.addName,\n      onNameChange: this.onNameChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 16\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/git/deathroll/src/App.js"],"names":["React","Component","Titlebar","BigRedButton","Rolled","GameCard","Container","Row","Col","playerList","initialState","ruleNum","ruleText","rolling","gameOver","dupe","tab","inputName","turn","pastRolls","rulesList","num","text","App","constructor","setNewText","newNum","newText","i","length","onRoll","setState","Math","ceil","random","stateTimeout","state","updateNum","newState","pastRoll","self","setTimeout","setRolledRule","unshift","onTabChange","newTab","onNameChange","event","target","value","addName","push","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Titlebar from './components/Titlebar/Titlebar';\r\nimport BigRedButton from './components/BigRedButton/BigRedButton';\r\nimport Rolled from './components/Rolled/Rolled';\r\nimport GameCard from './components/GameCard/GameCard';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport './App.css';\r\n\r\nlet playerList = []\r\n// initial values at the start of the game\r\nconst initialState = {\r\n  ruleNum: 123,                   // number displayed on button\r\n  ruleText: \"PRESS THE BUTTON\",   // text displayed in Rolled box\r\n  rolling: false,                 // currently rolling (used mostly for delaying text)\r\n  gameOver: false,                // display something different if the game ends\r\n  dupe: 2,                        // keep track of consecutive rolls of the same number\r\n  tab: \"rolls\",                   // which tab is selected in the lower card\r\n  inputName: '',\r\n  turn: -1\r\n}\r\n\r\nlet pastRolls = []\r\n\r\n// A list of custom rules set for specific numbers\r\nconst rulesList = [{\r\n    num: 69,\r\n    text: \"lock arms and drink\"\r\n  },{\r\n    num: 420,\r\n    text: \"blaze it\"\r\n  },{\r\n    num: 17,\r\n    text: \"naked mile\"\r\n  }, {\r\n    num: 3,\r\n    text: \"whatever\"\r\n  }\r\n]\r\n \r\nclass App extends Component{\r\n  constructor() {\r\n    super()\r\n    this.state = initialState;\r\n  }\r\n\r\n  //set the text to display based on the rolled number\r\n  setNewText = (newNum) => {\r\n    var newText = \"drink\"\r\n    if (newNum === 1) { // game over\r\n      newText = \"YOU LOSE, TAKE A SHOT\";\r\n    } else {\r\n      for (var i = 0; i < rulesList.length; i++) {  // loop through custom rules looking for matches\r\n        if (rulesList[i].num === newNum) {\r\n          newText = rulesList[i].text;\r\n        }\r\n      }\r\n    }\r\n    return newText;\r\n  }\r\n\r\n  // main game logic, triggered by buttonPress \r\n  onRoll = (num) => {\r\n    if (num === 1) { // game over, reset state\r\n      this.setState(initialState);\r\n      pastRolls = []\r\n    } else {\r\n      var newNum = Math.ceil(Math.random() * num); // roll a random number\r\n      var newText = this.setNewText(newNum);\r\n      var stateTimeout = 1000 // used to delay text loading (sometimes we don't want a delay)\r\n    \r\n      // check for duplicate roll and set state accordingly\r\n      if (newNum === num) {\r\n        newText += (\" X\" + this.state.dupe)\r\n        this.setState({ dupe: (this.state.dupe) + 1 })\r\n        stateTimeout = 0;\r\n      } else {\r\n        this.setState({ dupe: 2 });\r\n      }\r\n      \r\n      // always set rolling to true, if newNum is 1, update it later\r\n      var updateNum = {\r\n        rolling: true\r\n      }\r\n      if (newNum !== 1) {\r\n        updateNum.ruleNum = newNum\r\n      }\r\n      this.setState(updateNum)\r\n\r\n      var turn = this.state.turn;\r\n      if (turn === playerList.length - 1) {\r\n        turn = 0\r\n      } else {\r\n        turn++;\r\n      }\r\n\r\n      // state update that will be delayed stateTimeout seconds\r\n      var newState = {\r\n        ruleText: newText,\r\n        rolling: false,\r\n        turn: turn\r\n      }\r\n      if (newNum === 1) { // 1 means you lose!\r\n        newState.gameOver = true;\r\n        newState.ruleNum = 1;\r\n        if (num === 2) { // don't delay between 2 and 1\r\n          stateTimeout = 0;\r\n        }\r\n      }\r\n      let pastRoll = (newNum + ': ' + newText)\r\n    \r\n      var self = this;\r\n      setTimeout(function () { self.setRolledRule(newState, pastRoll); }, stateTimeout);\r\n    }\r\n  }\r\n\r\n  setRolledRule = (newState, pastRoll) => {\r\n    pastRolls.unshift(pastRoll)\r\n    this.setState(newState);\r\n  }\r\n\r\n  onTabChange = (newTab) => {\r\n    if (this.state.tab !== newTab) {\r\n      this.setState({tab: newTab})\r\n    }\r\n  }\r\n\r\n  onNameChange = (event) => {\r\n    this.setState({inputName: event.target.value})\r\n  }\r\n\r\n  addName = () => {\r\n    if (this.state.inputName !== '') {\r\n      playerList.push(this.state.inputName)\r\n      this.setState({inputName: ''})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { ruleNum, ruleText, rolling, gameOver, tab, inputName, turn } = this.state;\r\n    return (\r\n      <Container className=\"App\">\r\n        <Row>\r\n          <Col><Titlebar /></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><BigRedButton num={ruleNum} onRoll={this.onRoll} gameOver={gameOver} playerList={playerList} turn={turn}/></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><Rolled text={ruleText} rolling={rolling}/></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><GameCard tab={tab} onTabChange={this.onTabChange} pastRolls={pastRolls} playerList={playerList} inputName={inputName} addName={this.addName} onNameChange={this.onNameChange}/></Col>\r\n        </Row>\r\n        \r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}