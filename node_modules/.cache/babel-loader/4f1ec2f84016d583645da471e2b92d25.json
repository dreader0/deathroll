{"ast":null,"code":"var _jsxFileName = \"D:\\\\git\\\\deathroll\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Titlebar from './components/Titlebar/Titlebar';\nimport BigRedButton from './components/BigRedButton/BigRedButton';\nimport Rolled from './components/Rolled/Rolled';\nimport GameCard from './components/GameCard/GameCard';\nimport InfoModal from './components/InfoModal/InfoModal';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './App.css'; // initial values at the start of the game\n\nconst initialState = {\n  ruleNum: 123,\n  // number displayed on button\n  ruleText: \"PRESS THE BUTTON\",\n  // text displayed in Rolled box\n  rolling: false,\n  // currently rolling (used mostly for delaying text)\n  gameOver: false,\n  // display something different if the game ends\n  dupe: 2,\n  // keep track of consecutive rolls of the same number\n  tab: \"rolls\" // which tab is selected in the lower card\n\n};\nlet pastRolls = []; // A list of custom rules set for specific numbers\n\nconst rulesList = [{\n  num: 69,\n  text: \"lock arms and drink\"\n}, {\n  num: 420,\n  text: \"blaze it\"\n}, {\n  num: 17,\n  text: \"naked mile\"\n}];\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.formatValue = value => value.toFixed(0);\n\n    this.setNewText = newNum => {\n      var newText = \"drink\";\n\n      if (newNum === 1) {\n        // game over\n        newText = \"YOU LOSE, TAKE A SHOT\";\n      } else {\n        for (var i = 0; i < rulesList.length; i++) {\n          // loop through custom rules looking for matches\n          if (rulesList[i].num === newNum) {\n            newText = rulesList[i].text;\n          }\n        }\n      }\n\n      return newText;\n    };\n\n    this.onRoll = num => {\n      if (num === 1) {\n        // game over, reset state\n        this.setState(initialState);\n        pastRolls = [];\n      } else {\n        var newNum = Math.ceil(Math.random() * num); // roll a random number\n\n        var newText = this.setNewText(newNum);\n        var stateTimeout = 1000; // used to delay text loading (sometimes we don't want a delay)\n        // check for duplicate roll and set state accordingly\n\n        if (newNum === num) {\n          newText += \" X\" + this.state.dupe;\n          this.setState({\n            dupe: this.state.dupe + 1\n          });\n          stateTimeout = 0;\n        } else {\n          this.setState({\n            dupe: 2\n          });\n        } // always set ruleNum to the rolled Number and rolling to true\n\n\n        this.setState({\n          ruleNum: newNum,\n          rolling: true\n        }); // state update that will be delayed stateTimeout seconds\n\n        var newState = {\n          ruleText: newText,\n          rolling: false\n        };\n\n        if (newNum === 1) {\n          // 1 means you lose!\n          newState.gameOver = true;\n\n          if (num === 2) {\n            // don't delay between 2 and 1\n            stateTimeout = 0;\n          }\n        }\n\n        let pastRoll = newNum + ': ' + newText;\n        var self = this;\n        setTimeout(function () {\n          self.setRolledRule(newState, pastRoll);\n        }, stateTimeout);\n      }\n    };\n\n    this.setRolledRule = (newState, pastRoll) => {\n      pastRolls.unshift(pastRoll);\n      this.setState(newState);\n    };\n\n    this.onTabChange = newTab => {\n      if (this.state.tab !== newTab) {\n        this.setState({\n          tab: newTab\n        });\n      }\n    };\n\n    this.state = initialState;\n  }\n\n  render() {\n    const {\n      ruleNum,\n      ruleText,\n      rolling,\n      gameOver,\n      tab\n    } = this.state;\n    const [modalShow, setModalShow] = React.useState(false);\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Titlebar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 16\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(BigRedButton, {\n      num: ruleNum,\n      onRoll: this.onRoll,\n      formatValue: this.formatValue,\n      gameOver: gameOver,\n      rolling: rolling,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 16\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Rolled, {\n      text: ruleText,\n      rolling: rolling,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 16\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(GameCard, {\n      tab: tab,\n      onTabChange: this.onTabChange,\n      pastRolls: pastRolls,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 16\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      className: \"mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      style: {\n        fontSize: \"2rem\"\n      },\n      icon: \"info-circle\",\n      onClick: () => setModalShow(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(InfoModal, {\n      show: modalShow,\n      onHide: () => setModalShow(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/git/deathroll/src/App.js"],"names":["React","Component","Titlebar","BigRedButton","Rolled","GameCard","InfoModal","FontAwesomeIcon","Container","Row","Col","initialState","ruleNum","ruleText","rolling","gameOver","dupe","tab","pastRolls","rulesList","num","text","App","constructor","formatValue","value","toFixed","setNewText","newNum","newText","i","length","onRoll","setState","Math","ceil","random","stateTimeout","state","newState","pastRoll","self","setTimeout","setRolledRule","unshift","onTabChange","newTab","render","modalShow","setModalShow","useState","fontSize"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,YAAP,MAAyB,wCAAzB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;AACA,OAAO,WAAP,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,GADU;AACa;AAChCC,EAAAA,QAAQ,EAAE,kBAFS;AAEa;AAChCC,EAAAA,OAAO,EAAE,KAHU;AAGa;AAChCC,EAAAA,QAAQ,EAAE,KAJS;AAIa;AAChCC,EAAAA,IAAI,EAAE,CALa;AAKa;AAChCC,EAAAA,GAAG,EAAE,OANc,CAMa;;AANb,CAArB;AASA,IAAIC,SAAS,GAAG,EAAhB,C,CAEA;;AACA,MAAMC,SAAS,GAAG,CAAC;AACfC,EAAAA,GAAG,EAAE,EADU;AAEfC,EAAAA,IAAI,EAAE;AAFS,CAAD,EAGd;AACAD,EAAAA,GAAG,EAAE,GADL;AAEAC,EAAAA,IAAI,EAAE;AAFN,CAHc,EAMd;AACAD,EAAAA,GAAG,EAAE,EADL;AAEAC,EAAAA,IAAI,EAAE;AAFN,CANc,CAAlB;;AAYA,MAAMC,GAAN,SAAkBrB,SAAlB,CAA2B;AACzBsB,EAAAA,WAAW,GAAG;AACZ;;AADY,SAKdC,WALc,GAKCC,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAc,CAAd,CALX;;AAAA,SAQdC,UARc,GAQAC,MAAD,IAAY;AACvB,UAAIC,OAAO,GAAG,OAAd;;AACA,UAAID,MAAM,KAAK,CAAf,EAAkB;AAAE;AAClBC,QAAAA,OAAO,GAAG,uBAAV;AACD,OAFD,MAEO;AACL,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,SAAS,CAACY,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AAAG;AAC5C,cAAIX,SAAS,CAACW,CAAD,CAAT,CAAaV,GAAb,KAAqBQ,MAAzB,EAAiC;AAC/BC,YAAAA,OAAO,GAAGV,SAAS,CAACW,CAAD,CAAT,CAAaT,IAAvB;AACD;AACF;AACF;;AACD,aAAOQ,OAAP;AACD,KApBa;;AAAA,SAuBdG,MAvBc,GAuBJZ,GAAD,IAAS;AAChB,UAAIA,GAAG,KAAK,CAAZ,EAAe;AAAE;AACf,aAAKa,QAAL,CAActB,YAAd;AACAO,QAAAA,SAAS,GAAG,EAAZ;AACD,OAHD,MAGO;AACL,YAAIU,MAAM,GAAGM,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgBhB,GAA1B,CAAb,CADK,CACwC;;AAC7C,YAAIS,OAAO,GAAG,KAAKF,UAAL,CAAgBC,MAAhB,CAAd;AACA,YAAIS,YAAY,GAAG,IAAnB,CAHK,CAGmB;AAExB;;AACA,YAAIT,MAAM,KAAKR,GAAf,EAAoB;AAClBS,UAAAA,OAAO,IAAK,OAAO,KAAKS,KAAL,CAAWtB,IAA9B;AACA,eAAKiB,QAAL,CAAc;AAAEjB,YAAAA,IAAI,EAAG,KAAKsB,KAAL,CAAWtB,IAAZ,GAAoB;AAA5B,WAAd;AACAqB,UAAAA,YAAY,GAAG,CAAf;AACD,SAJD,MAIO;AACL,eAAKJ,QAAL,CAAc;AAAEjB,YAAAA,IAAI,EAAE;AAAR,WAAd;AACD,SAZI,CAcL;;;AACA,aAAKiB,QAAL,CAAc;AACZrB,UAAAA,OAAO,EAAEgB,MADG;AAEZd,UAAAA,OAAO,EAAE;AAFG,SAAd,EAfK,CAoBL;;AACA,YAAIyB,QAAQ,GAAG;AACb1B,UAAAA,QAAQ,EAAEgB,OADG;AAEbf,UAAAA,OAAO,EAAE;AAFI,SAAf;;AAIA,YAAIc,MAAM,KAAK,CAAf,EAAkB;AAAE;AAClBW,UAAAA,QAAQ,CAACxB,QAAT,GAAoB,IAApB;;AACA,cAAIK,GAAG,KAAK,CAAZ,EAAe;AAAE;AACfiB,YAAAA,YAAY,GAAG,CAAf;AACD;AACF;;AACD,YAAIG,QAAQ,GAAIZ,MAAM,GAAG,IAAT,GAAgBC,OAAhC;AAEA,YAAIY,IAAI,GAAG,IAAX;AACAC,QAAAA,UAAU,CAAC,YAAY;AAAED,UAAAA,IAAI,CAACE,aAAL,CAAmBJ,QAAnB,EAA6BC,QAA7B;AAAyC,SAAxD,EAA0DH,YAA1D,CAAV;AACD;AACF,KA/Da;;AAAA,SAiEdM,aAjEc,GAiEE,CAACJ,QAAD,EAAWC,QAAX,KAAwB;AACtCtB,MAAAA,SAAS,CAAC0B,OAAV,CAAkBJ,QAAlB;AACA,WAAKP,QAAL,CAAcM,QAAd;AACD,KApEa;;AAAA,SAsEdM,WAtEc,GAsECC,MAAD,IAAY;AACxB,UAAI,KAAKR,KAAL,CAAWrB,GAAX,KAAmB6B,MAAvB,EAA+B;AAC7B,aAAKb,QAAL,CAAc;AAAChB,UAAAA,GAAG,EAAE6B;AAAN,SAAd;AACD;AACF,KA1Ea;;AAEZ,SAAKR,KAAL,GAAa3B,YAAb;AACD;;AAyEDoC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEnC,MAAAA,OAAF;AAAWC,MAAAA,QAAX;AAAqBC,MAAAA,OAArB;AAA8BC,MAAAA,QAA9B;AAAwCE,MAAAA;AAAxC,QAAgD,KAAKqB,KAA3D;AACA,UAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BjD,KAAK,CAACkD,QAAN,CAAe,KAAf,CAAlC;AACA,wBACE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAK,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,CADF,CADF,eAIE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAK,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAEtC,OAAnB;AAA4B,MAAA,MAAM,EAAE,KAAKoB,MAAzC;AAAiD,MAAA,WAAW,EAAE,KAAKR,WAAnE;AAAgF,MAAA,QAAQ,EAAET,QAA1F;AAAoG,MAAA,OAAO,EAAED,OAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,CADF,CAJF,eAOE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAK,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAED,QAAd;AAAwB,MAAA,OAAO,EAAEC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,CADF,CAPF,eAUE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAK,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEG,GAAf;AAAoB,MAAA,WAAW,EAAE,KAAK4B,WAAtC;AAAmD,MAAA,SAAS,EAAE3B,SAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,CADF,CAVF,eAaE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsB,oBAAC,eAAD;AAAiB,MAAA,KAAK,EAAE;AAAEiC,QAAAA,QAAQ,EAAE;AAAZ,OAAxB;AAA8C,MAAA,IAAI,EAAC,aAAnD;AAAiE,MAAA,OAAO,EAAE,MAAMF,YAAY,CAAC,IAAD,CAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtB,CADF,eAEE,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAED,SAAjB;AAA4B,MAAA,MAAM,EAAE,MAAMC,YAAY,CAAC,KAAD,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAbF,CADF;AAoBD;;AApGwB;;AAuG3B,eAAe3B,GAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport Titlebar from './components/Titlebar/Titlebar';\r\nimport BigRedButton from './components/BigRedButton/BigRedButton';\r\nimport Rolled from './components/Rolled/Rolled';\r\nimport GameCard from './components/GameCard/GameCard';\r\nimport InfoModal from './components/InfoModal/InfoModal'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport './App.css';\r\n\r\n// initial values at the start of the game\r\nconst initialState = {\r\n  ruleNum: 123,                   // number displayed on button\r\n  ruleText: \"PRESS THE BUTTON\",   // text displayed in Rolled box\r\n  rolling: false,                 // currently rolling (used mostly for delaying text)\r\n  gameOver: false,                // display something different if the game ends\r\n  dupe: 2,                        // keep track of consecutive rolls of the same number\r\n  tab: \"rolls\"                    // which tab is selected in the lower card\r\n}\r\n\r\nlet pastRolls = []\r\n\r\n// A list of custom rules set for specific numbers\r\nconst rulesList = [{\r\n    num: 69,\r\n    text: \"lock arms and drink\"\r\n  },{\r\n    num: 420,\r\n    text: \"blaze it\"\r\n  },{\r\n    num: 17,\r\n    text: \"naked mile\"\r\n  }\r\n]\r\n \r\nclass App extends Component{\r\n  constructor() {\r\n    super()\r\n    this.state = initialState;\r\n  }\r\n\r\n  formatValue = (value) => value.toFixed(0); // formatting the animated number in NumWindow\r\n\r\n  //set the text to display based on the rolled number\r\n  setNewText = (newNum) => {\r\n    var newText = \"drink\"\r\n    if (newNum === 1) { // game over\r\n      newText = \"YOU LOSE, TAKE A SHOT\";\r\n    } else {\r\n      for (var i = 0; i < rulesList.length; i++) {  // loop through custom rules looking for matches\r\n        if (rulesList[i].num === newNum) {\r\n          newText = rulesList[i].text;\r\n        }\r\n      }\r\n    }\r\n    return newText;\r\n  }\r\n\r\n  // main game logic, triggered by buttonPress \r\n  onRoll = (num) => {\r\n    if (num === 1) { // game over, reset state\r\n      this.setState(initialState);\r\n      pastRolls = []\r\n    } else {\r\n      var newNum = Math.ceil(Math.random() * num); // roll a random number\r\n      var newText = this.setNewText(newNum);\r\n      var stateTimeout = 1000 // used to delay text loading (sometimes we don't want a delay)\r\n    \r\n      // check for duplicate roll and set state accordingly\r\n      if (newNum === num) {\r\n        newText += (\" X\" + this.state.dupe)\r\n        this.setState({ dupe: (this.state.dupe) + 1 })\r\n        stateTimeout = 0;\r\n      } else {\r\n        this.setState({ dupe: 2 });\r\n      }\r\n      \r\n      // always set ruleNum to the rolled Number and rolling to true\r\n      this.setState({\r\n        ruleNum: newNum,\r\n        rolling: true\r\n      })\r\n\r\n      // state update that will be delayed stateTimeout seconds\r\n      var newState = {\r\n        ruleText: newText,\r\n        rolling: false,\r\n      }\r\n      if (newNum === 1) { // 1 means you lose!\r\n        newState.gameOver = true;\r\n        if (num === 2) { // don't delay between 2 and 1\r\n          stateTimeout = 0;\r\n        }\r\n      }\r\n      let pastRoll = (newNum + ': ' + newText)\r\n    \r\n      var self = this;\r\n      setTimeout(function () { self.setRolledRule(newState, pastRoll); }, stateTimeout);\r\n    }\r\n  }\r\n\r\n  setRolledRule = (newState, pastRoll) => {\r\n    pastRolls.unshift(pastRoll)\r\n    this.setState(newState);\r\n  }\r\n\r\n  onTabChange = (newTab) => {\r\n    if (this.state.tab !== newTab) {\r\n      this.setState({tab: newTab})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { ruleNum, ruleText, rolling, gameOver, tab } = this.state;\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    return (\r\n      <Container className=\"App\">\r\n        <Row>\r\n          <Col><Titlebar /></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><BigRedButton num={ruleNum} onRoll={this.onRoll} formatValue={this.formatValue} gameOver={gameOver} rolling={rolling}/></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><Rolled text={ruleText} rolling={rolling}/></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><GameCard tab={tab} onTabChange={this.onTabChange} pastRolls={pastRolls}/></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col className=\"mt-5\"><FontAwesomeIcon style={{ fontSize: \"2rem\" }} icon=\"info-circle\" onClick={() => setModalShow(true)} /></Col>\r\n          <InfoModal show={modalShow} onHide={() => setModalShow(false)}/>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}