{"ast":null,"code":"var _jsxFileName = \"D:\\\\git\\\\deathroll\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Titlebar from './components/Titlebar/Titlebar';\nimport BigRedButton from './components/BigRedButton/BigRedButton';\nimport GameCard from './components/GameCard/GameCard';\nimport rules from './ruleLists/rules.json'; // import randomRules from './ruleLists/randomRules.json'\n// import InfoModal from './components/InfoModal/InfoModal'\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './App.css'; // initial values at the start of the game\n\nconst initialState = {\n  ruleNum: 9999,\n  // number displayed on button\n  ruleText: \"PRESS THE BUTTON\",\n  // text displayed in Rolled box\n  rolling: false,\n  // currently rolling (used mostly for delaying text)\n  gameOver: false,\n  // display something different if the game ends\n  dupe: 2 // keep track of consecutive rolls of the same number\n\n};\nlet pastRolls = []; // A list of custom rules set for specific numbers\n\nconst rulesList = rules.map(rule => {\n  return rule;\n});\nconst randomRulesList = getRules();\n\nasync function getRules() {\n  try {\n    let response = await fetch('https://github.com/dreader0/deathroll/raw/2020-08-02_AltRework/src/ruleLists/randomRules.json');\n    let responseJson = await response.json();\n    return responseJson.rules;\n  } catch (error) {\n    console.error(error);\n  }\n} // const randomRulesList = randomRules.rules.map((rule) => {\n//   return rule;\n// })\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.setNewText = newNum => {\n      var newText = randomRulesList[Math.ceil(Math.random() * (randomRulesList.length - 1))].text;\n\n      if (newNum === 1) {\n        // game over\n        newText = \"YOU LOSE, TAKE A SHOT\";\n      } else {\n        for (var i = 0; i < rulesList.length; i++) {\n          // loop through custom rules looking for matches\n          if (rulesList[i].num === newNum) {\n            newText = rulesList[i].text;\n          }\n        }\n      }\n\n      return newText;\n    };\n\n    this.onRoll = num => {\n      console.log(rulesList);\n\n      if (num === 1) {\n        // game over, reset state\n        this.setState(initialState);\n        pastRolls = [];\n      } else {\n        var newNum = Math.ceil(Math.random() * num); // roll a random number\n\n        var newText = this.setNewText(newNum);\n        var stateTimeout = 1000; // used to delay text loading (sometimes we don't want a delay)\n        // check for duplicate roll and set state accordingly\n\n        if (newNum === num) {\n          newText += \" X\" + this.state.dupe;\n          this.setState({\n            dupe: this.state.dupe + 1\n          });\n          stateTimeout = 0;\n        } else {\n          this.setState({\n            dupe: 2\n          });\n        } // always set ruleNum to the rolled Number and rolling to true\n\n\n        this.setState({\n          ruleNum: newNum,\n          rolling: true\n        }); // state update that will be delayed stateTimeout seconds\n\n        var newState = {\n          ruleText: newText,\n          rolling: false\n        };\n\n        if (newNum === 1) {\n          // 1 means you lose!\n          newState.gameOver = true;\n\n          if (num === 2) {\n            // don't delay between 2 and 1\n            stateTimeout = 0;\n          }\n        }\n\n        let pastRoll;\n\n        if (!(this.state.ruleNum === initialState.ruleNum && this.state.dupe === initialState.dupe)) {\n          pastRoll = this.state.ruleNum + ': ' + this.state.ruleText;\n          pastRolls.unshift(pastRoll);\n        }\n\n        var self = this;\n        setTimeout(function () {\n          self.setRolledRule(newState, pastRoll);\n        }, stateTimeout);\n      }\n    };\n\n    this.setRolledRule = (newState, pastRoll) => {\n      this.setState(newState);\n    };\n\n    this.state = initialState;\n  } //set the text to display based on the rolled number\n\n\n  render() {\n    const {\n      ruleNum,\n      ruleText,\n      rolling,\n      gameOver\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Titlebar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 16\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(BigRedButton, {\n      num: ruleNum,\n      onRoll: this.onRoll,\n      gameOver: gameOver,\n      rolling: rolling,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 16\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(GameCard, {\n      text: ruleText,\n      rolling: rolling,\n      pastRolls: pastRolls,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 16\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/git/deathroll/src/App.js"],"names":["React","Component","Titlebar","BigRedButton","GameCard","rules","Container","Row","Col","initialState","ruleNum","ruleText","rolling","gameOver","dupe","pastRolls","rulesList","map","rule","randomRulesList","getRules","response","fetch","responseJson","json","error","console","App","constructor","setNewText","newNum","newText","Math","ceil","random","length","text","i","num","onRoll","log","setState","stateTimeout","state","newState","pastRoll","unshift","self","setTimeout","setRolledRule","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Titlebar from './components/Titlebar/Titlebar';\r\nimport BigRedButton from './components/BigRedButton/BigRedButton';\r\nimport GameCard from './components/GameCard/GameCard';\r\nimport rules from './ruleLists/rules.json'\r\n// import randomRules from './ruleLists/randomRules.json'\r\n// import InfoModal from './components/InfoModal/InfoModal'\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport './App.css';\r\n\r\n// initial values at the start of the game\r\nconst initialState = {\r\n  ruleNum: 9999,                   // number displayed on button\r\n  ruleText: \"PRESS THE BUTTON\",   // text displayed in Rolled box\r\n  rolling: false,                 // currently rolling (used mostly for delaying text)\r\n  gameOver: false,                // display something different if the game ends\r\n  dupe: 2                         // keep track of consecutive rolls of the same number\r\n}\r\n\r\nlet pastRolls = []\r\n\r\n// A list of custom rules set for specific numbers\r\nconst rulesList = rules.map((rule) => {\r\n  return rule;\r\n})\r\n\r\nconst randomRulesList = getRules()\r\n\r\nasync function getRules() {\r\n  try {\r\n    let response = await fetch('https://github.com/dreader0/deathroll/raw/2020-08-02_AltRework/src/ruleLists/randomRules.json');\r\n    let responseJson = await response.json();\r\n    return responseJson.rules;\r\n   } catch(error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\n\r\n// const randomRulesList = randomRules.rules.map((rule) => {\r\n//   return rule;\r\n// })\r\n \r\nclass App extends Component{\r\n  constructor() {\r\n    super()\r\n    this.state = initialState;\r\n  }\r\n\r\n  //set the text to display based on the rolled number\r\n  setNewText = (newNum) => {\r\n    var newText = randomRulesList[Math.ceil(Math.random() * (randomRulesList.length - 1))].text\r\n    if (newNum === 1) { // game over\r\n      newText = \"YOU LOSE, TAKE A SHOT\";\r\n    } else {\r\n      for (var i = 0; i < rulesList.length; i++) {  // loop through custom rules looking for matches\r\n        if (rulesList[i].num === newNum) {\r\n          newText = rulesList[i].text;\r\n        }\r\n      }\r\n    }\r\n    return newText;\r\n  }\r\n\r\n  // main game logic, triggered by buttonPress \r\n  onRoll = (num) => {\r\n    console.log(rulesList)\r\n    if (num === 1) { // game over, reset state\r\n      this.setState(initialState);\r\n      pastRolls = []\r\n    } else {\r\n      var newNum = Math.ceil(Math.random() * num); // roll a random number\r\n      var newText = this.setNewText(newNum);\r\n      var stateTimeout = 1000 // used to delay text loading (sometimes we don't want a delay)\r\n    \r\n      // check for duplicate roll and set state accordingly\r\n      if (newNum === num) {\r\n        newText += (\" X\" + this.state.dupe)\r\n        this.setState({ dupe: (this.state.dupe) + 1 })\r\n        stateTimeout = 0;\r\n      } else {\r\n        this.setState({ dupe: 2 });\r\n      }\r\n      \r\n      // always set ruleNum to the rolled Number and rolling to true\r\n      this.setState({\r\n        ruleNum: newNum,\r\n        rolling: true\r\n      })\r\n\r\n      // state update that will be delayed stateTimeout seconds\r\n      var newState = {\r\n        ruleText: newText,\r\n        rolling: false,\r\n      }\r\n      if (newNum === 1) { // 1 means you lose!\r\n        newState.gameOver = true;\r\n        if (num === 2) { // don't delay between 2 and 1\r\n          stateTimeout = 0;\r\n        }\r\n      }\r\n\r\n      let pastRoll\r\n      if (!(this.state.ruleNum === initialState.ruleNum && this.state.dupe === initialState.dupe)) {\r\n        pastRoll = (this.state.ruleNum + ': ' + this.state.ruleText)\r\n        pastRolls.unshift(pastRoll)\r\n      }\r\n    \r\n      var self = this;\r\n      setTimeout(function () { self.setRolledRule(newState, pastRoll); }, stateTimeout);\r\n    }\r\n  }\r\n\r\n  setRolledRule = (newState, pastRoll) => {\r\n    \r\n    this.setState(newState);\r\n  }\r\n\r\n  render() {\r\n    const { ruleNum, ruleText, rolling, gameOver } = this.state;\r\n    return (\r\n      <Container className=\"App\">\r\n        <Row>\r\n          <Col><Titlebar /></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><BigRedButton num={ruleNum} onRoll={this.onRoll}  gameOver={gameOver} rolling={rolling}/></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><GameCard text={ruleText} rolling={rolling} pastRolls={pastRolls}/></Col>\r\n        </Row>\r\n        {/* <Row>\r\n          <Col className=\"mt-5\"><FontAwesomeIcon style={{ fontSize: \"2rem\" }} icon=\"info-circle\" /></Col>\r\n          <InfoModal/>\r\n        </Row> */}\r\n      </Container>\r\n    );\r\n  } \r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}