{"ast":null,"code":"var _jsxFileName = \"D:\\\\git\\\\deathroll\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Titlebar from './components/Titlebar/Titlebar';\nimport Rolled from './components/Rolled/Rolled';\nimport BigRedButton from './components/BigRedButton/BigRedButton';\nimport { Container, Row, Col, Badge } from 'react-bootstrap';\nimport './App.css'; // initial values at the start of the game\n\nconst initialState = {\n  ruleNum: 123,\n  // number displayed on button\n  ruleText: \"PRESS THE BUTTON\",\n  // text displayed in Rolled box\n  rolling: false,\n  // currently rolling (used mostly for delaying text)\n  gameOver: false,\n  // display something different if the game ends\n  dupe: 2 // keep track of consecutive rolls of the same number\n\n}; // A list of custom rules set for specific numbers\n\nconst rulesList = [{\n  num: 69,\n  text: \"lock arms and drink\"\n}, {\n  num: 420,\n  text: \"blaze it\"\n}, {\n  num: 17,\n  text: \"naked mile\"\n}];\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.formatValue = value => value.toFixed(0);\n\n    this.setNewText = newNum => {\n      var newText = \"drink\";\n\n      if (newNum === 1) {\n        // game over\n        newText = \"YOU LOSE, TAKE A SHOT\";\n      } else {\n        for (var i = 0; i < rulesList.length; i++) {\n          // loop through custom rules looking for matches\n          if (rulesList[i].num === newNum) {\n            newText = rulesList[i].text;\n          }\n        }\n      }\n\n      return newText;\n    };\n\n    this.onRoll = num => {\n      if (num === 1) {\n        // game over, reset state\n        this.setState(initialState);\n      } else {\n        var newNum = Math.ceil(Math.random() * num); // roll a random number\n\n        var newText = this.setNewText(newNum);\n        var stateTimeout = 1000; // used to delay text loading (sometimes we don't want a delay)\n        // check for duplicate roll and set state accordingly\n\n        if (newNum === num) {\n          newText += \" X\" + this.state.dupe;\n          this.setState({\n            dupe: this.state.dupe + 1\n          });\n          stateTimeout = 0;\n        } else {\n          this.setState({\n            dupe: 2\n          });\n        } // always set ruleNum to the rolled Number and rolling to true\n\n\n        this.setState({\n          ruleNum: newNum,\n          rolling: true\n        }); // state update that will be delayed stateTimeout seconds\n\n        var newState = {\n          ruleText: newText,\n          rolling: false\n        };\n\n        if (newNum === 1) {\n          // 1 means you lose!\n          newState.gameOver = true;\n\n          if (num === 2) {\n            // don't delay between 2 and 1\n            stateTimeout = 0;\n          }\n        }\n\n        var self = this;\n        setTimeout(function () {\n          self.setRolledRule(newState);\n        }, stateTimeout);\n      }\n    };\n\n    this.setRolledRule = newState => {\n      this.setState(newState);\n    };\n\n    this.state = initialState;\n  }\n\n  render() {\n    const {\n      ruleNum,\n      ruleText,\n      rolling,\n      gameOver\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Titlebar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 18\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(BigRedButton, {\n      num: ruleNum,\n      onRoll: this.onRoll,\n      formatValue: this.formatValue,\n      gameOver: gameOver,\n      rolling: rolling,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 16\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Rolled, {\n      text: ruleText,\n      rolling: rolling,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 18\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/git/deathroll/src/App.js"],"names":["React","Component","Titlebar","Rolled","BigRedButton","Container","Row","Col","Badge","initialState","ruleNum","ruleText","rolling","gameOver","dupe","rulesList","num","text","App","constructor","formatValue","value","toFixed","setNewText","newNum","newText","i","length","onRoll","setState","Math","ceil","random","stateTimeout","state","newState","self","setTimeout","setRolledRule","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Titlebar from './components/Titlebar/Titlebar';\r\nimport Rolled from './components/Rolled/Rolled';\r\nimport BigRedButton from './components/BigRedButton/BigRedButton';\r\nimport { Container, Row, Col, Badge } from 'react-bootstrap';\r\nimport './App.css';\r\n\r\n// initial values at the start of the game\r\nconst initialState = {\r\n  ruleNum: 123, // number displayed on button\r\n  ruleText: \"PRESS THE BUTTON\", // text displayed in Rolled box\r\n  rolling: false, // currently rolling (used mostly for delaying text)\r\n  gameOver: false, // display something different if the game ends\r\n  dupe: 2 // keep track of consecutive rolls of the same number\r\n}\r\n\r\n// A list of custom rules set for specific numbers\r\nconst rulesList = [{\r\n    num: 69,\r\n    text: \"lock arms and drink\"\r\n  },{\r\n    num: 420,\r\n    text: \"blaze it\"\r\n  },{\r\n    num: 17,\r\n    text: \"naked mile\"\r\n  }\r\n]\r\n \r\nclass App extends Component{\r\n  constructor() {\r\n    super()\r\n    this.state = initialState;\r\n  }\r\n\r\n  formatValue = (value) => value.toFixed(0); // formatting the animated number in NumWindow\r\n\r\n  //set the text to display based on the rolled number\r\n  setNewText = (newNum) => {\r\n    var newText = \"drink\"\r\n    if (newNum === 1) { // game over\r\n      newText = \"YOU LOSE, TAKE A SHOT\";\r\n    } else {\r\n      for (var i = 0; i < rulesList.length; i++) {  // loop through custom rules looking for matches\r\n        if (rulesList[i].num === newNum) {\r\n          newText = rulesList[i].text;\r\n        }\r\n      }\r\n    }\r\n    return newText;\r\n  }\r\n\r\n  // main game logic, triggered by buttonPress \r\n  onRoll = (num) => {\r\n    if (num === 1) { // game over, reset state\r\n      this.setState(initialState);\r\n    } else {\r\n      var newNum = Math.ceil(Math.random() * num); // roll a random number\r\n      var newText = this.setNewText(newNum);\r\n      var stateTimeout = 1000 // used to delay text loading (sometimes we don't want a delay)\r\n    \r\n      // check for duplicate roll and set state accordingly\r\n      if (newNum === num) {\r\n        newText += (\" X\" + this.state.dupe)\r\n        this.setState({ dupe: (this.state.dupe) + 1 })\r\n        stateTimeout = 0;\r\n      } else {\r\n        this.setState({ dupe: 2 });\r\n      }\r\n      \r\n      // always set ruleNum to the rolled Number and rolling to true\r\n      this.setState({\r\n        ruleNum: newNum,\r\n        rolling: true\r\n      })\r\n\r\n      // state update that will be delayed stateTimeout seconds\r\n      var newState = {\r\n        ruleText: newText,\r\n        rolling: false,\r\n      }\r\n      if (newNum === 1) { // 1 means you lose!\r\n        newState.gameOver = true;\r\n        if (num === 2) { // don't delay between 2 and 1\r\n          stateTimeout = 0;\r\n        }\r\n      }\r\n    \r\n      var self = this;\r\n      setTimeout(function () { self.setRolledRule(newState); }, stateTimeout);\r\n    }\r\n  }\r\n\r\n  setRolledRule = (newState) => {\r\n    this.setState(newState);\r\n  }\r\n\r\n  render() {\r\n    const { ruleNum, ruleText, rolling, gameOver } = this.state;\r\n    return (\r\n      <Container className=\"App\">\r\n          <Row>\r\n            <Col><Titlebar /></Col>\r\n          </Row>\r\n          <Row>\r\n          <Col><BigRedButton num={ruleNum} onRoll={this.onRoll} formatValue={this.formatValue} gameOver={gameOver} rolling={rolling}/></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col><Rolled text={ruleText} rolling={rolling}/></Col>\r\n        </Row>\r\n        </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}