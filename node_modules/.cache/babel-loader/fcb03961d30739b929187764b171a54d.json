{"ast":null,"code":"import _classCallCheck from\"D:\\\\git\\\\deathroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\git\\\\deathroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"D:\\\\git\\\\deathroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"D:\\\\git\\\\deathroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"D:\\\\git\\\\deathroll\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Titlebar from'./components/Titlebar/Titlebar';import BigRedButton from'./components/BigRedButton/BigRedButton';import GameCard from'./components/GameCard/GameCard';import rules from'./ruleLists/rules.json';import randomRules from'./ruleLists/randomRules.json';// import InfoModal from './components/InfoModal/InfoModal'\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport{Container,Row,Col}from'react-bootstrap';import'./App.css';// initial values at the start of the game\nvar initialState={ruleNum:9999,// number displayed on button\nruleText:\"PRESS THE BUTTON\",// text displayed in Rolled box\nrolling:false,// currently rolling (used mostly for delaying text)\ngameOver:false,// display something different if the game ends\ndupe:2// keep track of consecutive rolls of the same number\n};var pastRolls=[];// A list of custom rules set for specific numbers\nvar rulesList=rules.map(function(rule){return rule;});var randomRulesList=randomRules.rules.map(function(rule){return rule;});var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);_this=_super.call(this);_this.setNewText=function(newNum){var newText=randomRulesList[Math.ceil(Math.random()*(randomRulesList.length-1))].text;if(newNum===1){// game over\nnewText=\"YOU LOSE, TAKE A SHOT\";}else{for(var i=0;i<rulesList.length;i++){// loop through custom rules looking for matches\nif(rulesList[i].num===newNum){newText=rulesList[i].text;}}}return newText;};_this.onRoll=function(num){console.log(rulesList);if(num===1){// game over, reset state\n_this.setState(initialState);pastRolls=[];}else{var newNum=Math.ceil(Math.random()*num);// roll a random number\nvar newText=_this.setNewText(newNum);var stateTimeout=1000;// used to delay text loading (sometimes we don't want a delay)\n// check for duplicate roll and set state accordingly\nif(newNum===num){newText+=\" X\"+_this.state.dupe;_this.setState({dupe:_this.state.dupe+1});stateTimeout=0;}else{_this.setState({dupe:2});}// always set ruleNum to the rolled Number and rolling to true\n_this.setState({ruleNum:newNum,rolling:true});// state update that will be delayed stateTimeout seconds\nvar newState={ruleText:newText,rolling:false};if(newNum===1){// 1 means you lose!\nnewState.gameOver=true;if(num===2){// don't delay between 2 and 1\nstateTimeout=0;}}var pastRoll;if(!(_this.state.ruleNum===initialState.ruleNum&&_this.state.dupe===initialState.dupe)){pastRoll=_this.state.ruleNum+': '+_this.state.ruleText;pastRolls.unshift(pastRoll);}var self=_assertThisInitialized(_this);setTimeout(function(){self.setRolledRule(newState,pastRoll);},stateTimeout);}};_this.setRolledRule=function(newState,pastRoll){_this.setState(newState);};_this.state=initialState;return _this;}//set the text to display based on the rolled number\n_createClass(App,[{key:\"render\",value:function render(){var _this$state=this.state,ruleNum=_this$state.ruleNum,ruleText=_this$state.ruleText,rolling=_this$state.rolling,gameOver=_this$state.gameOver;return/*#__PURE__*/React.createElement(Container,{className:\"App\"},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Titlebar,null))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(BigRedButton,{num:ruleNum,onRoll:this.onRoll,gameOver:gameOver,rolling:rolling}))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(GameCard,{text:ruleText,rolling:rolling,pastRolls:pastRolls}))));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["D:/git/deathroll/src/App.js"],"names":["React","Component","Titlebar","BigRedButton","GameCard","rules","randomRules","Container","Row","Col","initialState","ruleNum","ruleText","rolling","gameOver","dupe","pastRolls","rulesList","map","rule","randomRulesList","App","setNewText","newNum","newText","Math","ceil","random","length","text","i","num","onRoll","console","log","setState","stateTimeout","state","newState","pastRoll","unshift","self","setTimeout","setRolledRule"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Titlebar from './components/Titlebar/Titlebar';\r\nimport BigRedButton from './components/BigRedButton/BigRedButton';\r\nimport GameCard from './components/GameCard/GameCard';\r\nimport rules from './ruleLists/rules.json'\r\nimport randomRules from './ruleLists/randomRules.json'\r\n// import InfoModal from './components/InfoModal/InfoModal'\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport './App.css';\r\n\r\n// initial values at the start of the game\r\nconst initialState = {\r\n  ruleNum: 9999,                   // number displayed on button\r\n  ruleText: \"PRESS THE BUTTON\",   // text displayed in Rolled box\r\n  rolling: false,                 // currently rolling (used mostly for delaying text)\r\n  gameOver: false,                // display something different if the game ends\r\n  dupe: 2                         // keep track of consecutive rolls of the same number\r\n}\r\n\r\nlet pastRolls = []\r\n\r\n// A list of custom rules set for specific numbers\r\nconst rulesList = rules.map((rule) => {\r\n  return rule;\r\n})\r\n\r\nconst randomRulesList = randomRules.rules.map((rule) => {\r\n  return rule;\r\n})\r\n \r\nclass App extends Component{\r\n  constructor() {\r\n    super()\r\n    this.state = initialState;\r\n  }\r\n\r\n  //set the text to display based on the rolled number\r\n  setNewText = (newNum) => {\r\n    var newText = randomRulesList[Math.ceil(Math.random() * (randomRulesList.length - 1))].text\r\n    if (newNum === 1) { // game over\r\n      newText = \"YOU LOSE, TAKE A SHOT\";\r\n    } else {\r\n      for (var i = 0; i < rulesList.length; i++) {  // loop through custom rules looking for matches\r\n        if (rulesList[i].num === newNum) {\r\n          newText = rulesList[i].text;\r\n        }\r\n      }\r\n    }\r\n    return newText;\r\n  }\r\n\r\n  // main game logic, triggered by buttonPress \r\n  onRoll = (num) => {\r\n    console.log(rulesList)\r\n    if (num === 1) { // game over, reset state\r\n      this.setState(initialState);\r\n      pastRolls = []\r\n    } else {\r\n      var newNum = Math.ceil(Math.random() * num); // roll a random number\r\n      var newText = this.setNewText(newNum);\r\n      var stateTimeout = 1000 // used to delay text loading (sometimes we don't want a delay)\r\n    \r\n      // check for duplicate roll and set state accordingly\r\n      if (newNum === num) {\r\n        newText += (\" X\" + this.state.dupe)\r\n        this.setState({ dupe: (this.state.dupe) + 1 })\r\n        stateTimeout = 0;\r\n      } else {\r\n        this.setState({ dupe: 2 });\r\n      }\r\n      \r\n      // always set ruleNum to the rolled Number and rolling to true\r\n      this.setState({\r\n        ruleNum: newNum,\r\n        rolling: true\r\n      })\r\n\r\n      // state update that will be delayed stateTimeout seconds\r\n      var newState = {\r\n        ruleText: newText,\r\n        rolling: false,\r\n      }\r\n      if (newNum === 1) { // 1 means you lose!\r\n        newState.gameOver = true;\r\n        if (num === 2) { // don't delay between 2 and 1\r\n          stateTimeout = 0;\r\n        }\r\n      }\r\n\r\n      let pastRoll\r\n      if (!(this.state.ruleNum === initialState.ruleNum && this.state.dupe === initialState.dupe)) {\r\n        pastRoll = (this.state.ruleNum + ': ' + this.state.ruleText)\r\n        pastRolls.unshift(pastRoll)\r\n      }\r\n    \r\n      var self = this;\r\n      setTimeout(function () { self.setRolledRule(newState, pastRoll); }, stateTimeout);\r\n    }\r\n  }\r\n\r\n  setRolledRule = (newState, pastRoll) => {\r\n    \r\n    this.setState(newState);\r\n  }\r\n\r\n  render() {\r\n    const { ruleNum, ruleText, rolling, gameOver } = this.state;\r\n    return (\r\n      <Container className=\"App\">\r\n        <Row>\r\n          <Col><Titlebar /></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><BigRedButton num={ruleNum} onRoll={this.onRoll}  gameOver={gameOver} rolling={rolling}/></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col><GameCard text={ruleText} rolling={rolling} pastRolls={pastRolls}/></Col>\r\n        </Row>\r\n        {/* <Row>\r\n          <Col className=\"mt-5\"><FontAwesomeIcon style={{ fontSize: \"2rem\" }} icon=\"info-circle\" /></Col>\r\n          <InfoModal/>\r\n        </Row> */}\r\n      </Container>\r\n    );\r\n  } \r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}