{"version":3,"sources":["components/Titlebar/Titlebar.js","components/NumWindow/NumWindow.js","components/BigRedButton/BigRedButton.js","components/GameCard/GameCard.js","components/InfoModal/InfoModal.js","App.js","serviceWorker.js","fonts/BalooDa2-SemiBold.ttf","index.js"],"names":["TitleBar","Container","Row","style","Col","lg","className","NumWindow","num","gameOver","xs","icon","value","formatValue","toFixed","BigRedButton","onRoll","rolling","Button","onClick","console","log","onKeyDown","e","keyCode","GameCard","text","pastRolls","Spinner","animation","variant","InfoModal","version","showModal","handleClose","Modal","size","aria-labelledby","centered","show","Header","closeButton","Title","id","Body","Footer","initialState","ruleNum","ruleText","dupe","rulesList","rules","map","rule","randomRulesList","App","mapRandomRules","i","randomRules","length","frequency","j","push","setNewText","newNum","newText","Math","ceil","random","setState","stateTimeout","state","updateNum","pastRoll","newState","unshift","self","setTimeout","setRolledRule","handleShow","this","pkg","cursor","fontSize","Component","Boolean","window","location","hostname","match","library","add","faSkull","faWrench","faInfoCircle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9520f147.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport './Titlebar.css'\r\n\r\nconst TitleBar = () => {\r\n  return (\r\n    <Container>\r\n      <Row style={{\"justifyContent\": \"center\"}}>\r\n        <Col lg={6}>\r\n          <h3 className=\"mt-3 mb-4 background\">deathroll</h3>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TitleBar;","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport './NumWindow.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport AnimatedNumber from 'animated-number-react';\r\n\r\n\r\nconst NumWindow = ({ num, gameOver}) => {\r\n  return (\r\n    <Row className=\"justify-content-center\">\r\n      <Col xs={6}>\r\n        {gameOver ?\r\n          <h5>Game Over!</h5> :\r\n          <p></p>\r\n        }\r\n        <div  className=\"rounded px-2 pt-2 pb-1 numWindow\">\r\n          {gameOver ?\r\n            <h1 className=\"skull windowText\"><FontAwesomeIcon icon=\"skull\" /></h1> :\r\n            <h1 className=\"windowText\"> <AnimatedNumber value={num} formatValue={(value) => value.toFixed(0)}/></h1>\r\n          }\r\n        </div>\r\n        {gameOver ?\r\n          <h6 className=\"mt-1\">Click to Reset</h6> :\r\n          <p></p>\r\n        }\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default NumWindow;","import React from 'react';\r\nimport NumWindow from '../NumWindow/NumWindow'\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport './BigRedButton.css'\r\n\r\nconst BigRedButton = ({onRoll, num, gameOver, rolling}) => {\r\n  const handleSpace = (e) => {\r\n    if (e.keyCode === 32) {\r\n      onRoll(num);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-center\">\r\n        <Col className=\"mt-5 mb-4\">\r\n            <Button className=\"btn btn-default btn-circle bigButton shine\" onClick={() => {rolling ? console.log(\"rolling...\") : onRoll(num)}} onKeyDown={handleSpace}>\r\n            <NumWindow num={num} gameOver={gameOver}/>\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default BigRedButton;","import React from 'react';\r\nimport { Container, Row, Col, Spinner } from 'react-bootstrap';\r\nimport './GameCard.css'\r\n\r\nconst GameCard = ({text, rolling, pastRolls}) => {\r\n  return (\r\n    <Container>\r\n      <Row style={{\"justifyContent\": \"center\"}}>\r\n        <Col lg={6} className=\"mt-5\">\r\n          <h4 className=\"ruleText p-2\">\r\n            {rolling ? <Spinner animation=\"border\" variant=\"secondary\"/>: text}\r\n          </h4>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default GameCard; ","import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap'\r\nimport './InfoModal.css'\r\n\r\nconst InfoModal = ({version, showModal, handleClose}) => {\r\n  return (\r\n    <Modal\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      show={showModal}\r\n      className=\"myModal\"\r\n    >\r\n      <Modal.Header closeButton style={{\"borderColor\": \"#121212\"}}>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          deathroll v{version}\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <h4>How to play</h4>\r\n        <p>Press the Big Red Button.<br/>Follow the rule that appears.<br/>Take turns repeat that until the number reaches a skull.<br/>Whoever rolls the skull loses, punish them as you see fit.</p>\r\n      </Modal.Body>\r\n      <Modal.Footer style={{\"borderColor\": \"#121212\"}}>\r\n        <Button variant=\"outline-light\" onClick={() => {handleClose()}}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default InfoModal;","import React, {Component} from 'react';\r\nimport Titlebar from './components/Titlebar/Titlebar';\r\nimport BigRedButton from './components/BigRedButton/BigRedButton';\r\nimport GameCard from './components/GameCard/GameCard';\r\nimport rules from './ruleLists/rules.json'\r\nimport randomRules from './ruleLists/randomRules.json'\r\nimport pkg from '../package.json'\r\nimport InfoModal from './components/InfoModal/InfoModal'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport './App.css';\r\n\r\n// initial values at the start of the game\r\nconst initialState = {\r\n  ruleNum: 9999,                   // number displayed on button\r\n  ruleText: \"PRESS THE BUTTON\",   // text displayed in Rolled box\r\n  rolling: false,                 // currently rolling (used mostly for delaying text)\r\n  gameOver: false,                // display something different if the game ends\r\n  dupe: 2,                         // keep track of consecutive rolls of the same number\r\n  showModal: false\r\n}\r\n\r\nlet pastRolls = []\r\n\r\n// A list of custom rules set for specific numbers\r\nconst rulesList = rules.map((rule) => {\r\n  return rule;\r\n})\r\n\r\n// const randomRulesList = randomRules.rules.map((rule) => {\r\n//   return rule;\r\n// })\r\n\r\nlet randomRulesList = []\r\n \r\nclass App extends Component{\r\n  constructor() {\r\n    super()\r\n    this.state = initialState;\r\n    // console.log(this.version);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.randomRules = this.mapRandomRules();\r\n    this.version = pkg.version;\r\n    // console.log(this.version)\r\n  }\r\n\r\n  mapRandomRules = () => {\r\n    for (let i = 0; i < randomRules.rules.length; i++) {\r\n      let frequency = randomRules.rules[i].frequency;\r\n      // console.log(frequency);\r\n      for (let j=0; j < frequency; j++) {\r\n        randomRulesList.push(randomRules.rules[i]);\r\n      }\r\n    }\r\n    // console.log(randomRulesList);\r\n  }\r\n\r\n  //set the text to display based on the rolled number\r\n  setNewText = (newNum) => {\r\n    var newText = randomRulesList[Math.ceil(Math.random() * (randomRulesList.length - 1))].text\r\n    if (newNum === 1) { // game over\r\n      newText = \"YOU LOSE!\";\r\n    } else {\r\n      for (var i = 0; i < rulesList.length; i++) {  // loop through custom rules looking for matches\r\n        if (rulesList[i].num === newNum) {\r\n          newText = rulesList[i].text;\r\n        }\r\n      }\r\n    }\r\n    return newText;\r\n  }\r\n\r\n  // main game logic, triggered by buttonPress \r\n  onRoll = (num) => {\r\n    // console.log(rulesList)\r\n    if (num === 1) { // game over, reset state\r\n      this.setState(initialState);\r\n      pastRolls = []\r\n    } else {\r\n      var newNum = Math.ceil(Math.random() * num); // roll a random number\r\n      var newText = this.setNewText(newNum);\r\n      var stateTimeout = 1000 // used to delay text loading (sometimes we don't want a delay)\r\n    \r\n      // check for duplicate roll and set state accordingly\r\n      if (newNum === num) {\r\n        newText += (\" X\" + this.state.dupe)\r\n        this.setState({ dupe: (this.state.dupe) + 1 })\r\n        stateTimeout = 0;\r\n      } else {\r\n        this.setState({ dupe: 2 });\r\n      }\r\n      \r\n      // only update num now if its not 1, otherwise do it later\r\n      var updateNum = {\r\n        rolling: true\r\n      }\r\n      if (newNum !== 1) {\r\n        updateNum.ruleNum = newNum;\r\n      }\r\n      this.setState(updateNum)\r\n\r\n      // state update that will be delayed stateTimeout seconds\r\n      var newState = {\r\n        ruleText: newText,\r\n        rolling: false,\r\n      }\r\n      if (newNum === 1) { // 1 means you lose!\r\n        newState.gameOver = true;\r\n        newState.ruleNum = 1;\r\n        if (num === 2) { // don't delay between 2 and 1\r\n          stateTimeout = 0;\r\n        }\r\n      }\r\n\r\n      let pastRoll\r\n      if (!(this.state.ruleNum === initialState.ruleNum && this.state.dupe === initialState.dupe)) {\r\n        pastRoll = (this.state.ruleNum + ': ' + this.state.ruleText)\r\n        pastRolls.unshift(pastRoll)\r\n      }\r\n    \r\n      var self = this;\r\n      setTimeout(function () { self.setRolledRule(newState, pastRoll); }, stateTimeout);\r\n    }\r\n  }\r\n\r\n  setRolledRule = (newState, pastRoll) => {\r\n    \r\n    this.setState(newState);\r\n  }\r\n\r\n  handleShow = () => {\r\n    this.setState({showModal: true})\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({showModal: false})\r\n  }\r\n\r\n  render() {\r\n    const { ruleNum, ruleText, rolling, gameOver, showModal } = this.state;\r\n    return (\r\n      <Container className=\"App\">\r\n          <Row>\r\n            <Col><Titlebar /></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col><BigRedButton num={ruleNum} onRoll={this.onRoll}  gameOver={gameOver} rolling={rolling}/></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col><GameCard text={ruleText} rolling={rolling} pastRolls={pastRolls}/></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col style={{cursor: \"pointer\"}} className=\"mt-5\"><FontAwesomeIcon style={{ fontSize: \"2rem\" }} icon=\"info-circle\" onClick={this.handleShow}/></Col>\r\n            <InfoModal version={this.version} showModal={showModal} handleClose={this.handleClose}/>\r\n          </Row>\r\n        \r\n        {/* <Row>\r\n          <Col>\r\n            <h4 className=\"mt-3\" style={{ color: '#F3F3F3', textShadow: '#000000AA -1px 2px' }}>v{version}</h4></Col>\r\n        </Row> */}\r\n      </Container>\r\n    );\r\n  } \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/BalooDa2-SemiBold.7dacce5d.ttf\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\n// import { fab } from '@fortawesome/free-brands-svg-icons'\r\nimport { faSkull, faWrench, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport './fonts/BalooDa2-SemiBold.ttf'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nlibrary.add(faSkull, faWrench, faInfoCircle)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}